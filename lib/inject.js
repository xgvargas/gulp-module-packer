// Generated by CoffeeScript 1.10.0
var PluginError, common, fs, gutil, through;

through = require('through2');

fs = require('fs');

gutil = require('gulp-util');

common = require('./common.js');

PluginError = gutil.PluginError;

module.exports.inject = function(options) {
  var config, defineInjection, opt, ref, replaceBlock, transform;
  ref = common.prepare(options), opt = ref[0], config = ref[1];
  defineInjection = function(target, block) {
    var file, i, inject, j, len, len1, pack, ref1, ref2, txt;
    inject = [];
    if (config.inject[target][block]) {
      ref1 = config.inject[target][block];
      for (i = 0, len = ref1.length; i < len; i++) {
        pack = ref1[i];
        if (opt.dev) {
          inject.push("<!-- " + pack + " -->");
          ref2 = config[block][pack];
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            file = ref2[j];
            if (file[0] !== ':' || file[1] !== ':') {
              inject.push(opt[block + 'Start'] + file + opt[block + 'End']);
            }
          }
        } else {
          txt = opt[block + 'Start'] + pack + opt.hash;
          if (opt.min) {
            txt += '.min';
          }
          txt += '.' + block + opt[block + 'End'];
          inject.push(txt);
        }
      }
    }
    return inject;
  };
  replaceBlock = function(text, block, data) {
    var i, indent, item, l, len, m, new_text, regex;
    if (block === 'js') {
      regex = /([\s\S]*?)\n?(<!--\s*gmp:inject:js\s*-->)\n?([\s\S]*?)\n?(<!--\s*gmp:end\s*-->)([\s\S]*)/i;
    } else {
      regex = /([\s\S]*?)\n?(<!--\s*gmp:inject:css\s*-->)\n?([\s\S]*?)\n?(<!--\s*gmp:end\s*-->)([\s\S]*)/i;
    }
    m = regex.exec(text);
    if (m) {
      new_text = m[1];
      l = new_text.length;
      indent = '\n';
      while (new_text[--l] === ' ') {
        indent += ' ';
      }
      if (opt.keepComment) {
        new_text += m[2];
      }
      for (i = 0, len = data.length; i < len; i++) {
        item = data[i];
        new_text += indent + item;
      }
      if (opt.keepComment) {
        new_text += indent + m[4];
      }
      new_text += m[5];
      return new_text;
    }
    return text;
  };
  transform = function(file, env, cb) {
    var content, filename;
    if (file.isStream()) {
      this.emit('error', new PluginError('gulp-module-packer', 'Streaming not supported.'));
      return cb();
    }
    filename = file.relative.replace(/\\/g, '/');
    if (config.inject[filename] != null) {
      content = replaceBlock(file.contents, 'css', defineInjection(filename, 'css'));
      content = replaceBlock(content, 'js', defineInjection(filename, 'js'));
      file.contents = new Buffer(content);
    } else {
      if (!opt.keepUninjected) {
        return cb();
      }
    }
    return cb(null, file);
  };
  return through.obj(transform);
};
