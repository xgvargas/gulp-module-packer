// Generated by CoffeeScript 1.10.0
var PluginError, fileExists, fs, gutil, yaml;

fs = require('fs');

yaml = require('js-yaml');

gutil = require('gulp-util');

PluginError = gutil.PluginError;

fileExists = function(path) {
  var error, error1;
  try {
    return fs.statSync(path).isFile();
  } catch (error1) {
    error = error1;
    return false;
  }
};

module.exports.prepare = function(options) {
  var attr, config, opt, val;
  opt = {
    configFile: null,
    base: 'www/',
    min: false,
    dev: true,
    keepComment: true,
    header: '',
    mode: 'pipe',
    keepConsumed: false,
    hash: '',
    jsStart: '<script src="',
    jsEnd: '"></script>',
    cssStart: '<link rel="stylesheet" href="',
    cssEnd: '">',
    keepUninjected: true,
    keepUnpacked: false,
    wrapOpt: {
      standalone: true,
      minify: true
    }
  };
  if (options != null) {
    for (attr in options) {
      val = options[attr];
      opt[attr] = val;
    }
  }
  if (opt.configFile == null) {
    if (fileExists('modpack.yaml')) {
      opt.configFile = 'modpack.yaml';
    }
  }
  if (opt.configFile == null) {
    if (fileExists('modpack.json')) {
      opt.configFile = 'modpack.json';
    }
  }
  if (opt.configFile.slice(-5) === '.yaml') {
    config = yaml.safeLoad(fs.readFileSync(opt.configFile));
  }
  if (opt.configFile.slice(-5) === '.json') {
    config = JSON.parse(fs.readFileSync(opt.configFile));
  }
  if (config == null) {
    throw new PluginError('gulp-module-packer', 'Invalid config file.');
  }
  return [opt, config];
};

module.exports.saveConfig = function(file, data) {
  if (file.slice(-5) === '.yaml') {
    fs.writeFileSync(file, yaml.safeDump(data, {
      indent: 4,
      noRefs: true
    }));
  }
  if (file.slice(-5) === '.json') {
    return fs.writeFileSync(file, JSON.stringify(data, null, 4));
  }
};
